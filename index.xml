<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mae Milano on Mae Milano</title>
    <link>http://languagesforsyste.ms/</link>
    <description>Recent content in Mae Milano on Mae Milano</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2020</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 -0700</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Looking for new PhD students!</title>
      <link>http://languagesforsyste.ms/post/looking-for-students/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 -0700</pubDate>
      
      <guid>http://languagesforsyste.ms/post/looking-for-students/</guid>
      <description>

&lt;h2 id=&#34;i-m-actively-looking-for-new-phd-students&#34;&gt;I&amp;rsquo;m actively looking for new PhD students!&lt;/h2&gt;

&lt;p&gt;Hey! If you&amp;rsquo;ve found this page, you&amp;rsquo;re (hopefully) looking at me as a
potential advisor for a PhD in computer science.  Welcome!&lt;/p&gt;

&lt;h2 id=&#34;what-might-we-work-on-together&#34;&gt;What might we work on together?&lt;/h2&gt;

&lt;p&gt;My research focuses on &lt;strong&gt;designing new
Programming Languages to solve problems in Distributed Systems&lt;/strong&gt;.  I
also have active, exciting projects purely in PL or DS.&lt;/p&gt;

&lt;p&gt;In systems, I&amp;rsquo;m excited to build &lt;strong&gt;new abstractions and systems&lt;/strong&gt; for wide-area,
local-first, or large-scale distributed systems; really anything where
the round-trip latency for communication is way too long, or the cost
of coordination is way too high.  Active projects in this vein include
the &lt;a href=&#34;https://hydro.run&#34; target=&#34;_blank&#34;&gt;Hydro project&lt;/a&gt; with Berkeley, the &lt;a href=&#34;https://derecho-project.github.io/&#34; target=&#34;_blank&#34;&gt;Derecho
project&lt;/a&gt; with Cornell and Stevens,
and some ongoing work with &lt;a href=&#34;http://languagesforsyste.ms/publication/keep-calm-and-crdt-on/&#34;&gt;CRDTs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Programming Languages, I&amp;rsquo;m excited to build &lt;strong&gt;new languages and type
systems&lt;/strong&gt; which make specific classes of bugs easier for programmers to
avoid.  This includes things like avoiding concurrent races to ensure
&lt;a href=&#34;http://languagesforsyste.ms/project/fearless-concurrency&#34;&gt;safe concurrency&lt;/a&gt;, or building &lt;a href=&#34;morphic-lang.org&#34; target=&#34;_blank&#34;&gt;new
functional languages&lt;/a&gt; which feature true zero-cost
abstractions.  One of my overriding goals in this work is to keep the
&lt;em&gt;programmer-facing&lt;/em&gt; complexity low; while the type system internals
can get complex, the user experience should remain friendly. My
ultimate metric: does the language make programs
&lt;strong&gt;meaningfully easier to &amp;ldquo;get right&amp;rdquo;&lt;/strong&gt; while remaining &lt;strong&gt;easy for existing
programmers&lt;/strong&gt; in the domain to understand?&lt;/p&gt;

&lt;p&gt;At the intersection, I&amp;rsquo;ve got lots of ideas on how to build &lt;strong&gt;new
languages that make distributed systems easier&lt;/strong&gt; to write and run.
Projects in this space include &lt;a href=&#34;http://languagesforsyste.ms/publication/katara&#34;&gt;using program synthesis to generate
CRDTs&lt;/a&gt; that don&amp;rsquo;t screw with programmer
expectations, &lt;a href=&#34;http://languagesforsyste.ms/publication/mixt&#34;&gt;new transactions languages&lt;/a&gt; that
keep distributed transactions consistent, or even &lt;a href=&#34;http://languagesforsyste.ms/project/gallifrey&#34;&gt;full programming
language designs&lt;/a&gt; which rethink how objects can be
shared across a distributed program.  I&amp;rsquo;m generally excited to think
about how writing communicating programs or programming with
distributed storage can be made easier, by taking into account the
&lt;em&gt;semantics of the programs&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-does-one-apply&#34;&gt;How does one apply?&lt;/h2&gt;

&lt;p&gt;Princeton&amp;rsquo;s Computer Science department features a centralized process
for PhD applications; everyone fills out an online application via the
&lt;a href=&#34;https://gradschool.princeton.edu/admission-onboarding/apply&#34; target=&#34;_blank&#34;&gt;graduate school&amp;rsquo;s application
portal&lt;/a&gt;,
which includes an opportunity to note particular areas of interest. If
you&amp;rsquo;re particularly excited to work with any particular faculty (like,
perhaps, me!) then please be sure to &lt;strong&gt;mention the faculty&amp;rsquo;s name&lt;/strong&gt;
somewhere in your application materials&amp;mdash;typically the research
statement.  You can learn more about the program at the &lt;a href=&#34;https://www.cs.princeton.edu/grad/&#34; target=&#34;_blank&#34;&gt;grad program
main page&lt;/a&gt;, and more about the
application itself at the &lt;a href=&#34;https://www.cs.princeton.edu/grad/admissions-requirements&#34; target=&#34;_blank&#34;&gt;admissions
requirements&lt;/a&gt;
page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The application Deadline is December 15th&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;should-i-reach-out-to-you-before-applying&#34;&gt;Should I reach out to you before applying?&lt;/h2&gt;

&lt;p&gt;In short, it&amp;rsquo;s not necessary.&lt;/p&gt;

&lt;p&gt;Many students are encouraged to reach out and directly contact the
faculty they want to work with, usually via email. If we&amp;rsquo;ve got a good
research match, or you&amp;rsquo;ve come across my work before and have ideas of
where we could take a collaboration, then by all means feel free to
reach out! But please know that this &lt;strong&gt;does not affect how&amp;mdash;or if&amp;mdash;I
will read your application&lt;/strong&gt;.  The best way to ensure that I look at
your application is to &lt;strong&gt;mention my name&lt;/strong&gt; somewhere in your
application.  And if you &lt;em&gt;have&lt;/em&gt; emailed me or another faculty member
without getting a response, then don&amp;rsquo;t fret! Faculty get a huge volume
of email from prospective students, and it&amp;rsquo;s easy to accidentally miss
a few.  As long as you apply to the department, we &lt;em&gt;will&lt;/em&gt; see your
application, even if we&amp;rsquo;ve missed your email!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keep CALM and CRDT On</title>
      <link>http://languagesforsyste.ms/publication/keep-calm-and-crdt-on/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 -0800</pubDate>
      
      <guid>http://languagesforsyste.ms/publication/keep-calm-and-crdt-on/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Researching with Undergraduates: a Curricular Approach</title>
      <link>http://languagesforsyste.ms/talk/researching-with-undergraduates/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 -0800</pubDate>
      
      <guid>http://languagesforsyste.ms/talk/researching-with-undergraduates/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Katara: Synthesizing CRDTs with Verified Lifting</title>
      <link>http://languagesforsyste.ms/publication/katara/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 -0700</pubDate>
      
      <guid>http://languagesforsyste.ms/publication/katara/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A developer-centric approach to Fearless Concurrency</title>
      <link>http://languagesforsyste.ms/talk/fearless-apple/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 -0700</pubDate>
      
      <guid>http://languagesforsyste.ms/talk/fearless-apple/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Fearless Concurrency PLDI Talk</title>
      <link>http://languagesforsyste.ms/talk/fearless-pldi/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 -0700</pubDate>
      
      <guid>http://languagesforsyste.ms/talk/fearless-pldi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Bringing Fearless Concurrency to the Masses</title>
      <link>http://languagesforsyste.ms/project/fearless-concurrency/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://languagesforsyste.ms/project/fearless-concurrency/</guid>
      <description>&lt;p&gt;More details can be found in the &lt;a href=&#34;../../publication/fearless-concurrency/&#34;&gt;PLDI paper&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hydro: Software that Runs at Every Scale</title>
      <link>http://languagesforsyste.ms/project/hydro/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://languagesforsyste.ms/project/hydro/</guid>
      <description>&lt;p&gt;Please visit the &lt;a href=&#34;https://hydro.run&#34; target=&#34;_blank&#34;&gt;main Hydro website&lt;/a&gt; to learn more!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A flexible type system for fearless concurrency</title>
      <link>http://languagesforsyste.ms/publication/fearless-concurrency/</link>
      <pubDate>Thu, 09 Jun 2022 00:00:00 -0700</pubDate>
      
      <guid>http://languagesforsyste.ms/publication/fearless-concurrency/</guid>
      <description></description>
    </item>
    
    <item>
      <title>New Directions in Cloud Programming</title>
      <link>http://languagesforsyste.ms/publication/pact/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 -0800</pubDate>
      
      <guid>http://languagesforsyste.ms/publication/pact/</guid>
      <description></description>
    </item>
    
    <item>
      <title>My Dissertation is Now Available!</title>
      <link>http://languagesforsyste.ms/post/dissertation/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 -0700</pubDate>
      
      <guid>http://languagesforsyste.ms/post/dissertation/</guid>
      <description>

&lt;p&gt;After many years at Cornell University, I have finally completed my
PhD journey!  My dissertation, entitled &amp;ldquo;Programming Safely with Weak
(And Strong) Consistency&amp;rdquo;, is now available via
&lt;a href=&#34;https://search.proquest.com/openview/1df00630d333277c5a74758c8f67c0d7/1.pdf&#34; target=&#34;_blank&#34;&gt;ProQuest&lt;/a&gt;
(or &lt;a href=&#34;http://languagesforsyste.ms/files/thesis.pdf&#34;&gt;directly from me&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;that-document-is-364-pages-is-there-a-summary&#34;&gt;That document is 364 pages, is there a summary?&lt;/h2&gt;

&lt;p&gt;Sure! The unifying theme of my dissertation is that
writing programs against weak consistency is inherently difficult.
My dissertation makes the job of writing safe programs against weak
consistency easier, by introducing programming languages in which
strong guarantees are defended from weakly-consistent influence, and
in which programmers can write consistent-by-construction programs
atop underlying weakly-consistent replication.&lt;/p&gt;

&lt;p&gt;The first of these languages is MixT, a new language for writing
&lt;em&gt;mixed-consistency transactions&lt;/em&gt;.  These atomic transactions can
operate against data at multiple consistency levels simultaneously,
and are equipped with an information-flow type system which guarantees
weakly-consistent observations cannot influence strongly-consistent
actions.&lt;/p&gt;

&lt;p&gt;While mixed-consistency transactions can defend strong data from weak
observations, they cannot ensure that fully-weak code is itself
correct.  To address this, we leverage monotonic data types to
introduce a core language of datalog-like predicates and triggers. In
this language, programmers can write monotonic functions over a set of
monotonic shared objects, ultimately resulting in a boolean.  These
monotonic, boolean-returning functions are stable predicates: once
they have become true, they remain true for all time.  Actions which
are predicated on these stable predicates cannot be invalidated by
missed or future updates.&lt;/p&gt;

&lt;p&gt;This monotonic language sits at the core of Derecho, a new system for
building strongly-consistent distributed systems via replicated state
machines.  Derecho&amp;rsquo;s Shared State Table (SST) implements monotonic
datatypes atop Remote Direct Memory Access (RDMA), resulting in a
high-performance, asynchronous substrate on which to build Derecho&amp;rsquo;s
monotonic language.  Using this SST, we have rephrased the Paxos
delivery condition monotonically, granting strong consistency despite
the underlying asynchronous replication.&lt;/p&gt;

&lt;p&gt;Finally Gallifrey exposes the monotonic reasoning properties of
Derecho&amp;rsquo;s core language directly to the user, safely integrating
monotonic datatypes into a traditional Java-like programming language.
Gallifrey allows any object to be asynchronously replicated via
&lt;em&gt;Restrictions&lt;/em&gt; to its interface, allowing only those operations which
are safe to call concurrently.  Datatypes shared under these
restrictions can be viewed monotonically, using a language of
predicates and triggers similar to that at the core of Derecho.  A
novel &lt;em&gt;linear region&lt;/em&gt;-based type system enforces that shared object
restrictions are respected.&lt;/p&gt;

&lt;h2 id=&#34;a-phd-takes-a-village&#34;&gt;A PhD Takes a Village&lt;/h2&gt;

&lt;p&gt;And mine is no exception.  The kindness and generosity of the people
who have surrounded me during my PhD never ceases to amaze.  Without
the community surrounding me, attaining a PhD would be nearly
impossible.  While my research and academic life has been touched by
innumerable hands, I would like to specifically highlight the enormous
assistance I have received from Andrew Myers, Ken Birman, Fabian
Muehlboeck, Patrick LaFontaine and Danny Yang.  It is no exaggeration
to say that without their help and guiding presence, I could never
have completed this PhD.&lt;/p&gt;

&lt;p&gt;To everyone who has helped me on this journey: thank you. Sincerely,
thank you.&lt;/p&gt;

&lt;p&gt;~Mae&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Derecho Tutorial</title>
      <link>http://languagesforsyste.ms/talk/derecho-tutorial/</link>
      <pubDate>Sun, 27 Oct 2019 00:00:00 -0700</pubDate>
      
      <guid>http://languagesforsyste.ms/talk/derecho-tutorial/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Derecho&#39;s Intelligent Object Store</title>
      <link>http://languagesforsyste.ms/talk/derecho-poster-aisys/</link>
      <pubDate>Sun, 27 Oct 2019 00:00:00 -0700</pubDate>
      
      <guid>http://languagesforsyste.ms/talk/derecho-poster-aisys/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Tour of Gallifrey, a Language for Geodistributed Programming</title>
      <link>http://languagesforsyste.ms/publication/gallifrey/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 -0700</pubDate>
      
      <guid>http://languagesforsyste.ms/publication/gallifrey/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Gallifrey SNAPL Talk</title>
      <link>http://languagesforsyste.ms/talk/gallifrey-conference-talk/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 -0700</pubDate>
      
      <guid>http://languagesforsyste.ms/talk/gallifrey-conference-talk/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
